{"version":3,"sources":["App.js","index.js"],"names":["App","state","data","id","message","intervalIsSet","idToDelete","idToUpdate","objectToUpdate","getDataFromDb","fetch","then","json","res","setState","putDataToDB","currentIds","map","idToBeAdded","includes","axios","post","deleteFromDB","idTodelete","parseInt","objIdToDelete","forEach","dat","_id","delete","updateDB","updateToApply","objIdToUpdate","update","this","interval","setInterval","clearInterval","length","style","padding","key","color","type","onChange","e","target","value","placeholder","width","onClick","Component","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.d087f945.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport axios from 'axios';\n\nclass App extends Component {\n  // 初始化元件的狀態\n  state = {\n    data: [],\n    id: 0,\n    message: null,\n    intervalIsSet: false,\n    idToDelete: null,\n    idToUpdate: null,\n    objectToUpdate: null,\n  };\n\n  // 當元件載入時，它首先要從資料庫中獲取所有的資料，這裡會設定一個輪詢邏輯，及時將資料在 `UI` 中更新。\n  componentDidMount() {\n    this.getDataFromDb();\n    if (!this.state.intervalIsSet) {\n      let interval = setInterval(this.getDataFromDb, 1000);\n      this.setState({ intervalIsSet: interval });\n    }\n  }\n\n  // 永遠不要讓一個程序持續存在\n  // 當我們結束使用時，一定要殺死這個程序\n  componentWillUnmount() {\n    if (this.state.intervalIsSet) {\n      clearInterval(this.state.intervalIsSet);\n      this.setState({ intervalIsSet: null });\n    }\n  }\n\n\n  // 我們的第一個使用後端api的get方法\n  // 從我們的資料庫中獲取資料\n  getDataFromDb = () => {\n    fetch('http://3.19.29.61:3000/api/getdata')\n      .then((data) => data.json())\n      .then((res) => this.setState({ data: res.data }));\n  };\n\n  // 使用 put 方法，在資料庫裡面插入一條新的資料\n  putDataToDB = (message) => {\n    let currentIds = this.state.data.map((data) => data.id);\n    let idToBeAdded = 0;\n    while (currentIds.includes(idToBeAdded)) {\n      ++idToBeAdded;\n    }\n\n    axios.post('http://3.19.29.61:3000/api/putData', {\n      id: idToBeAdded,\n      message: message,\n    });\n  };\n\n  // 我們的刪除方法使用我們的後端api\n  // 刪除現有資料庫資訊\n  deleteFromDB = (idTodelete) => {\n    parseInt(idTodelete);\n    let objIdToDelete = null;\n    this.state.data.forEach((dat) => {\n      if (dat.id == idTodelete) {\n        objIdToDelete = dat._id;\n      }\n    });\n\n    axios.delete('http://3.19.29.61:3000/api/deleteData', {\n      data: {\n        id: objIdToDelete,\n      },\n    });\n  };\n\n  // 我們的更新方法使用我們的後端api\n  // 覆蓋現有的資料庫資訊\n  updateDB = (idToUpdate, updateToApply) => {\n    let objIdToUpdate = null;\n    parseInt(idToUpdate);\n    this.state.data.forEach((dat) => {\n      if (dat.id == idToUpdate) {\n        objIdToUpdate = dat._id;\n      }\n    });\n\n    axios.post('http://3.19.29.61:3000/api/updateData', {\n      id: objIdToUpdate,\n      update: { message: updateToApply },\n    });\n  };\n\n  render() {\n    const { data } = this.state;\n    return (\n      <div>\n        <ul>\n          {data.length <= 0\n            ? 'NO DB ENTRIES YET'\n            : data.map((dat) => (\n                <li style={{ padding: '10px' }} key={data.message}>\n                  <span style={{ color: 'gray' }}> id: </span> {dat.id} <br />\n                  <span style={{ color: 'gray' }}> data: </span>\n                  {dat.message}\n                </li>\n              ))}\n        </ul>\n        <div style={{ padding: '10px' }}>\n          <input\n            type=\"text\"\n            onChange={(e) => this.setState({ message: e.target.value })}\n            placeholder=\"add something in the database\"\n            style={{ width: '200px' }}\n          />\n          <button onClick={() => this.putDataToDB(this.state.message)}>\n            ADD\n          </button>\n        </div>\n        <div style={{ padding: '10px' }}>\n          <input\n            type=\"text\"\n            style={{ width: '200px' }}\n            onChange={(e) => this.setState({ idToDelete: e.target.value })}\n            placeholder=\"put id of item to delete here\"\n          />\n          <button onClick={() => this.deleteFromDB(this.state.idToDelete)}>\n            DELETE\n          </button>\n        </div>\n        <div style={{ padding: '10px' }}>\n          <input\n            type=\"text\"\n            style={{ width: '200px' }}\n            onChange={(e) => this.setState({ idToUpdate: e.target.value })}\n            placeholder=\"id of item to update here\"\n          />\n          <input\n            type=\"text\"\n            style={{ width: '200px' }}\n            onChange={(e) => this.setState({ updateToApply: e.target.value })}\n            placeholder=\"put new value of the item here\"\n          />\n          <button\n            onClick={() =>\n              this.updateDB(this.state.idToUpdate, this.state.updateToApply)\n            }\n          >\n            UPDATE\n          </button>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);"],"sourceRoot":""}